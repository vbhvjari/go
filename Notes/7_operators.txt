Operators and Operands:

a + b
Here, + is Operator whereas a and b are Operands


Operations in Go language:
1) Comparison Operators
2) Arithmetic Operators
3) Assignment Operators
4) Bitwise Operators
5) Logical Operators


1) Comparison Operators
-> Compares two operands and yields a Boolean Value(true or false)
-> Compare values of same data type
-> true if it matches else returns false
-> Operators:
	Equal			==
	Not Equal		!=
	less than		<
	less than equal to	<=
	greater than		>
	greater than equal to	>=


2) Arithmetic Operators
-> Arithmetic related operations between same type of operands
-> Operators:
	addition	+	Add value of two operands
	subtraction	-	Subtract from left operand to right operand
	multiplication	*	Multiply left and right operands
	division	/	Divide left operand by right operand
	modules		%	returns remainder when left operand is divided by right operand
	increment	++	unary operator - increment by 1
	decrement	--	unary operator - decrement by 1

3) Logical Operators
-> Determine the logic between variables or values
-> output in boolean type
-> Operators:
	AND	&&	return true if both statements are true
	OR	||	returns true if any one of them true
	NOT	!	unary operator - reverse the result


4) Assignment Operators
-> Operators:
	assign				=	Assigns left operand with value of the right
	add and assign			+=	x+= y ==> x = x+y
	subtract and assign		-=	x-= y ==> x = x-y
	multiply and assign		*=	x*= y ==> x = x*y
	divide and assign		/=	x/= y ==> x = x/y
	divide and assign modules	%=	x%= y ==> x = x%y

5) Bitwise Operators
-> works at bit level
-> 1 byte = 8 bits
-> XOR - returns 1 if two bits are opposite otherwise 0
-> Operators:
	bitwise AND	&	AND operation for every bit of two numbers
	bitwise OR	|	OR operator for every bit of two numbers
	bitwise XOR	^	XOR operator for every bit of two numbers
	left shift	<<	shifts all bits towards left by a certain number of specified bits
	right shift	>>	shifts all bits towards right by a certain number of specified bits
	
